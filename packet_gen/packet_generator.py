import abc
import sys
from telnetlib import IP

import scapy
import socket

from scapy.layers.inet import TCP, UDP
from scapy.packet import Raw
from enum import Enum
import PacketGeneratorBase
from scapy.layers.l2 import Ether
from scapy.layers.tls.handshake import TLSClientHello, TLS13ClientHello


class Proto(Enum):
    TCP = 0
    UDP = 1


class PacketGenerator(PacketGeneratorBase):
    def generate_client_packet(self):
        target = ('target.local', 443)
        src_port = 1244
        flags = 'S'

        stos = 150
        dtos = 514

        src_bytes = 177
        dst_bytes = 173

        src_load = 4199
        dst_load = 4105

        src_rate = 5.898
        dst_rate = 5.898

        src_pkts = 2
        dst_pkts = 2

        proto = Proto.TCP

        packet = Ether() / IP(dst=target[0], tos=stos) / TCP(dport=target[1], flags='S')

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:

            # send init to server
            init = IP(dst="192.168.1.254") / \
                   (TCP(sport=src_port, dport=80) if proto == Proto.TCP else UDP(sport=src_port, dport=80)) / \
                   Raw(bytes(f"{dst_bytes},{dst_load},{dst_rate},{dst_pkts}"))
            sock.connect(target)
            sock.send(bytes(init))

            src_pkts -= 1
            src_bytes -= len(init)

            for idx in range(src_pkts):
                pass

    def generate_server_packet(self):
        pass


class ServerBase(abc.ABC):
    @abc.abstractmethod
    def handle_connection(self):
        pass

    @abc.abstractmethod
    def listen(self):
        pass


class TCPServer(ServerBase):
    def __init__(self, addr, port):
        self.addr = addr
        self.port = port

    def __enter__(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((self.addr, self.port))

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.sock.close()

    def listen(self):
        self.sock.listen()

    def handle_connection(self):
        conn, addr = self.sock.accept()
        with conn:
            print('Connected by', addr)
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                conn.sendall(data)


class UDPServer(ServerBase):
    pass
