from packet_gen.ServerBase import ServerBase
import logging
import socket


class TCPServer(ServerBase):
    def __init__(self, addr, port):
        self.addr = addr
        self.port = port
        self.connections = {}

    def __enter__(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((self.addr, self.port))
        self.sock.listen()
        logging.info(f'Started listening on {self.addr}:{self.port}')

        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.sock.close()

    def handle_connection(self):
        conn, addr = self.sock.accept()
        with conn:
            logging.info(f'Connected by {addr}')
            while True:
                data = conn.recv(1024)
                if not data:
                    break
                logging.debug(f'received: "{data}"')

    def client_thread(self, conn):
        data = conn.recv(4096)
        decoded = data.decode()
        print(decoded)
        name, discrim = decoded.split(',')
        logging.info(f'Successfully connected.'.encode())
        conn_id = len(self.connections)
        conn.send(f'There are {len(conn_id) - 1} users online.'.encode())
        self.forward(f'{name}#{discrim} has joined the chat room. Say hi!', conn_id)
        self.connections[conn_id] = conn
        while True:
            try:
                data = conn.recv(4096)
                decoded = data.decode()
                if not decoded:
                    break
                print(f'Data received: {decoded}')
                self.forward(decoded, conn_id)
            except Exception as _:
                print(_)
                break
        self.connections.pop(conn_id)
        self.forward(f'{name}#{discrim} has left the chat room.', conn_id)


class UDPServer(ServerBase):
    pass


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s|%(name)s|%(levelname)s| %(message)s', level=logging.DEBUG)
    src_target = ('192.168.0.234', 5050)
    server = TCPServer(*src_target)
    with server as srv:
        while True:
            srv.handle_connection()

