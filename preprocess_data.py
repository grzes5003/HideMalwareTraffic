import pandas as pd
from sklearn.model_selection import train_test_split

tags_list = [
    'duration',
    'src_bytes',
    'dst_bytes',
    'wrong_fragment',
    'urgent',
    'hot',
    'num_failed_logins',
    'num_compromised',
    'root_shell',
    'su_attempted',
    'num_root',
    'num_file_creations',
    'num_shells',
    'num_access_files',
    'count',
    'srv_count',
    'serror_rate',
    'srv_serror_rate',
    'rerror_rate',
    'srv_rerror_rate',
    'same_srv_rate',
    'diff_srv_rate',
    'srv_diff_host_rate',
    'dst_host_count',
    'dst_host_srv_count',
    'dst_host_same_srv_rate',
    'dst_host_diff_srv_rate',
    'dst_host_same_src_port_rate',
    'dst_host_srv_diff_host_rate',
    'dst_host_serror_rate',
    'dst_host_srv_serror_rate',
    'dst_host_rerror_rate',
    'dst_host_srv_rerror_rate',
    # 'class',
    'protocol_type-icmp',
    'protocol_type-tcp',
    'protocol_type-udp',
    'service-IRC',
    'service-X11',
    'service-Z39_50',
    'service-aol',
    'service-auth',
    'service-bgp',
    'service-courier',
    'service-csnet_ns',
    'service-ctf',
    'service-daytime',
    'service-discard',
    'service-domain',
    'service-domain_u',
    'service-echo',
    'service-eco_i',
    'service-ecr_i',
    'service-efs',
    'service-exec',
    'service-finger',
    'service-ftp',
    'service-ftp_data',
    'service-gopher',
    'service-harvest',
    'service-hostnames',
    'service-http',
    'service-http_2784',
    'service-http_443',
    'service-http_8001',
    'service-imap4',
    'service-iso_tsap',
    'service-klogin',
    'service-kshell',
    'service-ldap',
    'service-link',
    'service-login',
    'service-mtp',
    'service-name',
    'service-netbios_dgm',
    'service-netbios_ns',
    'service-netbios_ssn',
    'service-netstat',
    'service-nnsp',
    'service-nntp',
    'service-ntp_u',
    'service-other',
    'service-pm_dump',
    'service-pop_2',
    'service-pop_3',
    'service-printer',
    'service-private',
    'service-red_i',
    'service-remote_job',
    'service-rje',
    'service-shell',
    'service-smtp',
    'service-sql_net',
    'service-ssh',
    'service-sunrpc',
    'service-supdup',
    'service-systat',
    'service-telnet',
    'service-tftp_u',
    'service-tim_i',
    'service-time',
    'service-urh_i',
    'service-urp_i',
    'service-uucp',
    'service-uucp_path',
    'service-vmnet',
    'service-whois',
    'flag-OTH',
    'flag-REJ',
    'flag-RSTO',
    'flag-RSTOS0',
    'flag-RSTR',
    'flag-S0',
    'flag-S1',
    'flag-S2',
    'flag-S3',
    'flag-SF',
    'flag-SH',
    'land-0',
    'land-1',
    'logged_in-0',
    'logged_in-1',
    'is_host_login-0',
    'is_host_login-1',
    'is_guest_login-0',
    'is_guest_login-1',
]

cont_tags_list = [
    'duration',
    'src_bytes',
    'dst_bytes',
    'wrong_fragment',
    'urgent',
    'hot',
    'num_failed_logins',
    'num_compromised',
    'root_shell',
    'su_attempted',
    'num_root',
    'num_file_creations',
    'num_shells',
    'num_access_files',
    'num_outbound_cmds',
    'count',
    'srv_count',
    'serror_rate',
    'srv_serror_rate',
    'rerror_rate',
    'srv_rerror_rate',
    'same_srv_rate',
    'diff_srv_rate',
    'srv_diff_host_rate',
    'dst_host_count',
    'dst_host_srv_count',
    'dst_host_same_srv_rate',
    'dst_host_diff_srv_rate',
    'dst_host_same_src_port_rate',
    'dst_host_srv_diff_host_rate',
    'dst_host_serror_rate',
    'dst_host_srv_serror_rate',
    'dst_host_rerror_rate',
    'dst_host_srv_rerror_rate',
]

desc_tags_list = [
    'protocol_type',
    'service',
    'flag',
    'land',
    'logged_in',
    'is_host_login',
    'is_guest_login',
]

desc_tags_expanded = [
    'protocol_type-icmp',
    'protocol_type-tcp',
    'protocol_type-udp',
    'service-IRC',
    'service-X11',
    'service-Z39_50',
    'service-aol',
    'service-auth',
    'service-bgp',
    'service-courier',
    'service-csnet_ns',
    'service-ctf',
    'service-daytime',
    'service-discard',
    'service-domain',
    'service-domain_u',
    'service-echo',
    'service-eco_i',
    'service-ecr_i',
    'service-efs',
    'service-exec',
    'service-finger',
    'service-ftp',
    'service-ftp_data',
    'service-gopher',
    'service-harvest',
    'service-hostnames',
    'service-http',
    'service-http_2784',
    'service-http_443',
    'service-http_8001',
    'service-imap4',
    'service-iso_tsap',
    'service-klogin',
    'service-kshell',
    'service-ldap',
    'service-link',
    'service-login',
    'service-mtp',
    'service-name',
    'service-netbios_dgm',
    'service-netbios_ns',
    'service-netbios_ssn',
    'service-netstat',
    'service-nnsp',
    'service-nntp',
    'service-ntp_u',
    'service-other',
    'service-pm_dump',
    'service-pop_2',
    'service-pop_3',
    'service-printer',
    'service-private',
    'service-red_i',
    'service-remote_job',
    'service-rje',
    'service-shell',
    'service-smtp',
    'service-sql_net',
    'service-ssh',
    'service-sunrpc',
    'service-supdup',
    'service-systat',
    'service-telnet',
    'service-tftp_u',
    'service-tim_i',
    'service-time',
    'service-urh_i',
    'service-urp_i',
    'service-uucp',
    'service-uucp_path',
    'service-vmnet',
    'service-whois',
    'flag-OTH',
    'flag-REJ',
    'flag-RSTO',
    'flag-RSTOS0',
    'flag-RSTR',
    'flag-S0',
    'flag-S1',
    'flag-S2',
    'flag-S3',
    'flag-SF',
    'flag-SH',
    'land-0',
    'land-1',
    'logged_in-0',
    'logged_in-1',
    'is_host_login-0',
    'is_host_login-1',
    'is_guest_login-0',
    'is_guest_login-1',
]


def encode_numeric_zscore(df, name, mean=None, sd=None):
    df[name] = (df[name] - mean) / sd


def encode_text_dummy(df, name):
    dummies = pd.get_dummies(df[name])
    for x in dummies.columns:
        dummy_name = f"{name}-{x}"
        df[dummy_name] = dummies[x]
    df.drop(name, axis=1, inplace=True)


def preprocess_data():
    df2 = pd.read_csv('saved_data/KDDTrain.csv')
    cont_tags_map = list(map(lambda name: (name, df2[name].mean(), df2[name].std()), cont_tags_list))
    [encode_numeric_zscore(df2, name, mean, std) for (name, mean, std) in cont_tags_map]
    [encode_text_dummy(df2, name) for name in desc_tags_list]

    pd.set_option('display.max_columns', 8)
    pd.set_option('display.max_rows', 5)

    df2 = df2.drop('id', 1)
    df2.dropna(inplace=True, axis=1)
    print(df2[0:5])

    normal_mask = df2['class'] == 'normal'
    attack_mask = df2['class'] != 'normal'

    df2.drop('class', axis=1, inplace=True)

    df_normal = df2[normal_mask]
    df_attack = df2[attack_mask]

    print(f"Normal count: {len(df_normal)}")
    print(f"Attack count: {len(df_attack)}")

    df_normal.to_csv('saved_data/df_normal.csv')
    df_attack.to_csv('saved_data/df_attack.csv')


def discrete(value):
    return 1 if value >= 0.5 else 0


def quantify_data():
    df = pd.read_csv('saved_data/data_generated.csv')
    df.columns = tags_list
    for tag in desc_tags_expanded:
        df[tag] = df[tag].apply(discrete)
    df.to_csv('saved_data/data_generated_desc.csv')


if __name__ == "__main__":
    # preprocess_data()
    quantify_data()
