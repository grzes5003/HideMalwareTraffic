import pandas as pd
from sklearn.model_selection import train_test_split

cont_tags_list = [
    'duration',
    'src_bytes',
    'dst_bytes',
    'wrong_fragment',
    'urgent',
    'hot',
    'num_failed_logins',
    'num_compromised',
    'root_shell',
    'su_attempted',
    'num_root',
    'num_file_creations',
    'num_shells',
    'num_access_files',
    'num_outbound_cmds',
    'count',
    'srv_count',
    'serror_rate',
    'srv_serror_rate',
    'rerror_rate',
    'srv_rerror_rate',
    'same_srv_rate',
    'diff_srv_rate',
    'srv_diff_host_rate',
    'dst_host_count',
    'dst_host_srv_count',
    'dst_host_same_srv_rate',
    'dst_host_diff_srv_rate',
    'dst_host_same_src_port_rate',
    'dst_host_srv_diff_host_rate',
    'dst_host_serror_rate',
    'dst_host_srv_serror_rate',
    'dst_host_rerror_rate',
    'dst_host_srv_rerror_rate',
]

desc_tags_list = [
    'protocol_type',
    'service',
    'flag',
    'land',
    'logged_in',
    'is_host_login',
    'is_guest_login',
]


def encode_numeric_zscore(df, name, mean=None, sd=None):
    df[name] = (df[name] - mean) / sd


def encode_text_dummy(df, name):
    dummies = pd.get_dummies(df[name])
    for x in dummies.columns:
        dummy_name = f"{name}-{x}"
        df[dummy_name] = dummies[x]
    df.drop(name, axis=1, inplace=True)


def preprocess_data():
    df2 = pd.read_csv('saved_data/KDDTrain.csv')
    cont_tags_map = list(map(lambda name: (name, df2[name].mean(), df2[name].std()), cont_tags_list))
    [encode_numeric_zscore(df2, name, mean, std) for (name, mean, std) in cont_tags_map]
    [encode_text_dummy(df2, name) for name in desc_tags_list]

    pd.set_option('display.max_columns', 8)
    pd.set_option('display.max_rows', 5)

    df2 = df2.drop('id', 1)
    df2.dropna(inplace=True, axis=1)
    print(df2[0:5])

    normal_mask = df2['class'] == 'normal'
    attack_mask = df2['class'] != 'normal'

    df2.drop('class', axis=1, inplace=True)

    df_normal = df2[normal_mask]
    df_attack = df2[attack_mask]

    print(f"Normal count: {len(df_normal)}")
    print(f"Attack count: {len(df_attack)}")

    df_normal.to_csv('saved_data/df_normal.csv')
    df_attack.to_csv('saved_data/df_attack.csv')


if __name__ == "__main__":
    preprocess_data()
