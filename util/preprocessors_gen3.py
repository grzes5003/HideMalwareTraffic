import os

import numpy as np
import pandas as pd
from util.data_constants import GEN3


def remove_special_chars(path):
    with open(path, 'r') as infile:
        data = infile.read()
        data = data.replace('*', '')
    with open(path, 'w') as outfile:
        outfile.write(data)


def encode_text_binary(df, name, bits: int):
    b_arr = list(zip(*[[int(x) for x in list(f'{{0:0{str(bits)}b}}'.format(int(val), '08b'))] for val in df[name]]))
    for idx, arr in enumerate(b_arr):
        df[f"{name}_{idx}"] = arr
    df.drop(name, axis=1, inplace=True)


def encode_numeric_min_max(df, name, min=None, max=None):
    df[name] = (df[name] - min) / (max - min)


def discrete(value):
    return 1 if value >= 0.5 else 0


def quantify_array(arr: np.ndarray):
    df = pd.DataFrame(arr, columns=GEN3.all_tags_after)
    dte = GEN3.desc_tags_expanded

    for tag in dte:
        df[tag] = df[tag].apply(discrete)

    return df.to_numpy()


def add_labels():
    ...


def prepare_recorded_data(_path, _ip_list):
    remove_special_chars(_path)

    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    df.drop(['SrcLoad', 'DstLoad', 'SynAck', 'AckDat', 'RunTime'], inplace=True, axis=1)

    df_groups = df.groupby(by=['Dport', 'Sport', 'SrcAddr', 'DstAddr'])
    df_list = [(n, d) for n, d in df_groups if
               d['Cause'].iloc[0] == 'Start' and len(d) > 1 and 'tcp' in d['Proto'].unique()]
    padding_len = max([len(d) for _, d in df_list])

    arr = np.empty([len(df_list), 114, 114])
    for n, d in df_list:
        d['StartTime'] = d['StartTime'].diff()
        d.drop(['Dport', 'Sport', 'Proto', 'DstAddr', 'SrcAddr', 'State', 'Cause', 'TcpRtt'], inplace=True, axis=1)
        # df = df.append(pd.Series(0, index=df.columns), ignore_index=True)
        d['StartTime'] = d['StartTime'].fillna(d['StartTime'].mean())

        # binarize data
        for name, bits in GEN3.col_binary_dict.items():
            encode_text_binary(d, name, bits)

        # normalize cont data
        cont_tags_map = list(map(lambda _name: (_name, d[_name].min(), d[_name].max()), GEN3.col_cont))
        [encode_numeric_min_max(d, name, _min, _max) for (name, _min, _max) in cont_tags_map]

        c = pd.DataFrame(np.zeros((114 - len(d), len(d.columns))), columns=d.columns)

        d = d.append(c)
        # list(reversed(sorted([(len(d), d['Proto']) for _, d in df_groups])))
        arr[0, :, :] = d.to_numpy()
    np.save(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_prepared'), arr)
    print('Done')


def create_data_mix(a, ):
    pass


if __name__ == '__main__':
    ip_list = ['2a00:1450:401b:80d::200e', '2a00:1450:401b:80e::2016', '2a03:2880:f016:19:face:b00c:0:2825',
               '35.186.224.47', '20.199.120.151', '198.252.206.25']

    prepare_recorded_data('..\\saved_data\\custom_data\\p2_spotify_gen3_deli.csv', ip_list)
    print('done')
    # prepare_recorded_data_gen2('..\\saved_data\\custom_data\\p3_raw.csv')
    # prepare_recorded_data_as_cont('..\\saved_data\\custom_data\\p3_raw.csv')
