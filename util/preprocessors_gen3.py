import os

import numpy as np
import pandas as pd
from util.data_constants import GEN3, GEN3_CONT, GEN3_MIXED, GEN


def remove_special_chars(path):
    with open(path, 'r') as infile:
        data = infile.read()
        data = data.replace('*', '')
    with open(path, 'w') as outfile:
        outfile.write(data)


def encode_text_binary(df, name, bits: int):
    b_arr = list(zip(*[[int(x) for x in list(f'{{0:0{str(bits)}b}}'.format(int(val), '08b'))] for val in df[name]]))
    for idx, arr in enumerate(b_arr):
        df[f"{name}_{idx}"] = arr
    df.drop(name, axis=1, inplace=True)


def encode_text_soft_binary(df, name, bits: int):
    """
    Soft version of binarize -> instead of 0, 1 resturns 0.1, 0.9
    """
    b_arr = list(zip(*[[int(x) for x in list(f'{{0:0{str(bits)}b}}'.format(int(val), '08b'))] for val in df[name]]))
    b_arr = [(0.1 if val[0] == 0 else 0.9) for val in b_arr]
    for idx, arr in enumerate(b_arr):
        df[f"{name}_{idx}"] = arr
    df.drop(name, axis=1, inplace=True)


def encode_numeric_min_max(df, name, min=None, max=None):
    df[name] = (df[name] - min) / (max - min)


def discrete(value):
    return 1 if value >= 0.5 else 0


def quantify_array(arr: np.ndarray):
    df = pd.DataFrame(arr, columns=GEN3.all_tags_after)
    dte = GEN3.desc_tags_expanded

    for tag in dte:
        df[tag] = df[tag].apply(discrete)

    return df.to_numpy()


def add_labels():
    ...


def prepare_recorded_data(_path, _ip_list):
    remove_special_chars(_path)

    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    df.drop(['SrcLoad', 'DstLoad', 'SynAck', 'AckDat', 'RunTime'], inplace=True, axis=1)

    df_groups = df.groupby(by=['Dport', 'Sport', 'SrcAddr', 'DstAddr'])
    df_list = [(n, d) for n, d in df_groups if
               d['Cause'].iloc[0] == 'Start' and len(d) > 1 and 'tcp' in d['Proto'].unique()]
    padding_len = max([len(d) for _, d in df_list])

    arr = np.empty([len(df_list), 114, 114])
    for n, d in df_list:
        d['StartTime'] = d['StartTime'].diff()
        d['StartTime'] = d['StartTime'].fillna(d['StartTime'].mean())

        d.drop(['Dport', 'Sport', 'Proto', 'DstAddr', 'SrcAddr', 'State', 'Cause',
                'TcpRtt', 'SrcRate', 'DstRate', 'SrcRate', 'DstRate'],
               inplace=True, axis=1)
        # df = df.append(pd.Series(0, index=df.columns), ignore_index=True)
        # d['StartTime'] = d['StartTime_']
        # binarize data
        for name, bits in GEN3.col_binary_dict.items():
            encode_text_binary(d, name, bits)

        # normalize cont data
        cont_tags_map = list(map(lambda _name: (_name, d[_name].min(), d[_name].max()), GEN3.col_cont))
        [encode_numeric_min_max(d, name, _min, _max) for (name, _min, _max) in cont_tags_map]

        # c = pd.DataFrame(np.zeros((114 - len(d), len(d.columns))), columns=d.columns)

        # d = d.append(c)
        # list(reversed(sorted([(len(d), d['Proto']) for _, d in df_groups])))
        arr[0, :, :] = d.to_numpy()
    np.save(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_prepared'), arr)
    print('Done')


def prepare_recorded_data_mixed(_path, _ip_list):
    remove_special_chars(_path)

    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    df.drop(['SrcLoad', 'DstLoad', 'SynAck', 'AckDat', 'RunTime'], inplace=True, axis=1)

    df_groups = df.groupby(by=['Dport', 'Sport', 'SrcAddr', 'DstAddr'])
    df_list = [(n, d) for n, d in df_groups if
               d['Cause'].iloc[0] == 'Start' and len(d) > 1 and 'tcp' in d['Proto'].unique()]

    df2 = None
    for idx, (_, d) in enumerate(df_list):
        d['StartTime'] = d['StartTime'].diff()
        d['StartTime'] = d['StartTime'].fillna(d['StartTime'].mean())

        d.drop(['Dport', 'Sport', 'Proto', 'DstAddr', 'SrcAddr', 'State', 'Cause',
                'TcpRtt', 'SrcRate', 'DstRate', 'SrcRate', 'DstRate'],
               inplace=True, axis=1)
        # df = df.append(pd.Series(0, index=df.columns), ignore_index=True)
        # d['StartTime'] = d['StartTime_']
        # binarize data
        for name, bits in GEN3_MIXED.col_binary_dict.items():
            encode_text_soft_binary(d, name, bits)

        # c = pd.DataFrame(np.zeros((114 - len(d), len(d.columns))), columns=d.columns)

        # d = d.append(c)
        # list(reversed(sorted([(len(d), d['Proto']) for _, d in df_groups])))
        if idx == 0:
            df2 = d
        else:
            df2 = df2.append(d)

    # normalize cont data
    cont_tags_map = list(map(lambda _name: (_name, df2[_name].min(), df2[_name].max()), GEN3_MIXED.col_cont))
    [encode_numeric_min_max(df2, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    # filter numbers too big
    df2 = df2[df2 <= 1]
    df2.dropna(inplace=True)

    df2.sort_index(inplace=True)
    df2.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_prepared_mixed_ver.csv'),
               index=False)
    print('Done')


def prepare_recorded_data_cont(_path, _ip_list):
    remove_special_chars(_path)

    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    df.drop(['SrcLoad', 'DstLoad', 'SynAck', 'AckDat', 'RunTime'], inplace=True, axis=1)

    df_groups = df.groupby(by=['Dport', 'Sport', 'SrcAddr', 'DstAddr'])
    df_list = [(n, d) for n, d in df_groups if
               d['Cause'].iloc[0] == 'Start' and len(d) > 1 and 'tcp' in d['Proto'].unique()]

    df2 = None
    for idx, (_, d) in enumerate(df_list):
        d['StartTime'] = d['StartTime'].diff()
        d['StartTime'] = d['StartTime'].fillna(d['StartTime'].mean())

        d.drop(['Dport', 'Sport', 'Proto', 'DstAddr', 'SrcAddr', 'State', 'Cause',
                'TcpRtt', 'SrcRate', 'DstRate', 'SrcRate', 'DstRate'],
               inplace=True, axis=1)

        cont_tags_map = list(map(lambda _name: (_name, 0, GEN3_CONT.art_max[_name]), GEN3_CONT.col_custom_cont))
        [encode_numeric_min_max(d, name, _min, _max) for (name, _min, _max) in cont_tags_map]

        if idx == 0:
            df2 = d
        else:
            df2 = df2.append(d)
    # normalize cont data
    cont_tags_map = list(map(lambda _name: (_name, df2[_name].min(), df2[_name].max()), GEN3_CONT.col_cont))
    [encode_numeric_min_max(df2, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    # filter numbers too big
    df2 = df2[df2 <= 1]
    df2.dropna(inplace=True)

    df2.sort_index(inplace=True)
    df2.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_prepared.csv'), index=False)
    print('Done')


def prepare_raw_version_recorded_data_cont(_path, _ip_list):
    remove_special_chars(_path)

    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    df.drop(['SrcLoad', 'DstLoad', 'SynAck', 'AckDat', 'RunTime'], inplace=True, axis=1)

    df_groups = df.groupby(by=['Dport', 'Sport', 'SrcAddr', 'DstAddr'])
    df_list = [(n, d) for n, d in df_groups if
               d['Cause'].iloc[0] == 'Start' and len(d) > 1 and 'tcp' in d['Proto'].unique()]

    df2 = None
    for idx, (_, d) in enumerate(df_list):
        d['StartTime'] = d['StartTime'].diff()
        d['StartTime'] = d['StartTime'].fillna(d['StartTime'].mean())

        d.drop(['Dport', 'Sport', 'Proto', 'DstAddr', 'SrcAddr', 'State', 'Cause',
                'TcpRtt', 'SrcRate', 'DstRate', 'SrcRate', 'DstRate'],
               inplace=True, axis=1)

        # cont_tags_map = list(map(lambda _name: (_name, 0, GEN3_CONT.art_max[_name]), GEN3_CONT.col_custom_cont))
        # [encode_numeric_min_max(d, name, _min, _max) for (name, _min, _max) in cont_tags_map]

        if idx == 0:
            df2 = d
        else:
            df2 = df2.append(d)

    # filter numbers too big
    df2 = df2[df2 <= 2**16]
    df2.dropna(inplace=True)

    df2.sort_index(inplace=True)
    df2.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_prepared_raw.csv'),
               index=False)
    print('Done')


def create_data_mix(a, ):
    pass


def prepare_cont_from_mix(_path):
    # prepare timestamp
    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    cont_tags_map = list(map(lambda _name: (_name, 0, GEN3_MIXED.art_max[_name]), GEN3_CONT.col_custom_cont))
    [encode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    # normalize cont data
    cont_tags_map = list(map(lambda _name: (_name, df[_name].min(), df[_name].max()), GEN3_CONT.col_cont))
    [encode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    df.sort_index(inplace=True)
    df.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_cont.csv'), index=False)
    print('Done')


if __name__ == '__main__':
    ip_list = ['2a00:1450:401b:80d::200e', '2a00:1450:401b:80e::2016', '2a03:2880:f016:19:face:b00c:0:2825',
               '35.186.224.47', '20.199.120.151', '198.252.206.25']

    # prepare_raw_version_recorded_data_cont('..\\saved_data\\custom_data2\\p2_spotify_gen3.csv', ip_list)
    # prepare_recorded_data_mixed('..\\saved_data\\custom_data2\\p2_spotify_gen3.csv', ip_list)
    # prepare_cont_from_mix(f'..\\saved_data\\vae_{GEN}_data_generated_0_cols_decoded.csv')
    prepare_cont_from_mix(f'..\\saved_data\\wgan_GEN_54_data_generated_0_cols_decoded.csv')
    print('done')
    # prepare_recorded_data_gen2('..\\saved_data\\custom_data\\p3_raw.csv')
    # prepare_recorded_data_as_cont('..\\saved_data\\custom_data\\p3_raw.csv')
