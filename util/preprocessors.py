from data_constants import col_cont, col_dummy, col_binary_dict, col_drop
from datetime import datetime
import pandas as pd
import os
SEC_IN_DAY = 86400


def encode_text_dummy(df, name):
    dummies = pd.get_dummies(df[name])
    for x in dummies.columns:
        dummy_name = f"{name}-{x}"
        df[dummy_name] = dummies[x]
    df.drop(name, axis=1, inplace=True)


def encode_text_binary(df, name, bits: int):
    b_arr = list(zip(*[[int(x) for x in list(f'{{0:0{str(bits)}b}}'.format(int(val), '08b'))] for val in df[name]]))
    for idx, arr in enumerate(b_arr):
        df[f"{name}_{idx}"] = arr
    df.drop(name, axis=1, inplace=True)


def encode_numeric_zscore(df, name, mean=None, sd=None):
    df[name] = (df[name] - mean) / sd


def encode_numeric_min_max(df, name, min=None, max=None):
    df[name] = (df[name] - min) / (max - min)


def prep_time(ts):
    dt = datetime.utcfromtimestamp(ts)
    df2 = dt - dt.replace(hour=0, minute=0, second=0, microsecond=0)
    return dt.isoweekday(), df2.total_seconds() / SEC_IN_DAY


def remove_special_chars(path):
    with open(path, 'r') as infile:
        data = infile.read()
        data = data.replace('*', '')
    with open(path, 'w') as outfile:
        outfile.write(data)


def prepare_recorded_data(path):
    remove_special_chars(path)

    # prepare timestamp
    df = pd.read_fwf(path)
    df.dropna(inplace=True)
    df.replace({'*': ''})
    df['weekday'], df['daytime'] = list(zip(*list(map(prep_time, df['StartTime']))))

    # binarize data
    for name, bites in col_binary_dict.items():
        encode_text_binary(df, name, bites)

    # normalize cont data
    cont_tags_map = list(map(lambda _name: (_name, df[_name].min(), df[_name].max()), col_cont))
    [encode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    # dummy data
    [encode_text_dummy(df, name) for name in col_dummy]

    # prepare ports data
    df['Sport'] = ['other' if val not in ['domain', 'https'] else val for val in df['Sport']]
    df['Dport'] = ['other' if val not in ['domain', 'https'] else val for val in df['Dport']]
    [encode_text_dummy(df, name) for name in ['Sport', 'Dport']]

    # drop unnecessary columns
    [df.drop(val, axis=1, inplace=True) for val in col_drop]

    df.to_csv(os.path.join(os.path.dirname(path), f'{os.path.splitext(os.path.basename(path))[0]}_prepared.csv'),
              index=False)
    print('Done')


if __name__ == '__main__':
    prepare_recorded_data('..\\saved_data\\custom_data\\p2_quic_yt.txt')
