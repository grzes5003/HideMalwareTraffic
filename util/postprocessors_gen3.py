from util.data_constants import GEN, GEN3_CONT, GEN3_MIXED
from sklearn.preprocessing import KBinsDiscretizer
from datetime import datetime
import pandas as pd
import os
SEC_IN_DAY = 86400


def bin2int(arr: [int]):
    res = 0
    for bit in arr:
        res = (res << 1) | bit
    return res


def prep_time(ts):
    dt = datetime.utcfromtimestamp(ts)
    df2 = dt - dt.replace(hour=0, minute=0, second=0, microsecond=0)
    return dt.isoweekday(), df2.total_seconds() / SEC_IN_DAY


def remove_special_chars(path):
    with open(path, 'r') as infile:
        data = infile.read()
        data = data.replace('*', '')
    with open(path, 'w') as outfile:
        outfile.write(data)


def encode_numeric_min_max(df, name, min=None, max=None):
    df[name] = (df[name] - min) / (max - min)


def decode_numeric_min_max(df, name, min=None, max=None):
    df[name] = (max - min) * df[name] + min


def discretize(df, name):
    df[name] = [round(val) for val in df[name]]


def decode_text_binary(df, name, bits: int):
    res = list(zip(*[df[f"{name}_{idx}"] for idx in range(bits)]))
    int_res = [bin2int(val) for val in res]

    [df.drop(f"{name}_{idx}", axis=1, inplace=True) for idx in range(bits)]
    df[name] = int_res


def decode_generated_data_gen3(_path, ref_path, _ip_list=None):
    remove_special_chars(_path)

    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    ref_df = pd.read_csv(ref_path)
    ref_df.dropna(inplace=True)
    ref_df.replace({'*': ''})

    cont_tags_map = list(map(lambda _name: (_name, ref_df[_name].min(), ref_df[_name].max()), GEN3_CONT.col_cont))
    [decode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]
    print("here")

    cont_tags_map = list(map(lambda _name: (_name, 0, GEN3_CONT.art_max[_name]), GEN3_CONT.col_custom_cont))
    [decode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    [discretize(df, name) for name in GEN3_CONT.col_discrete]

    df.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_decoded.csv'),
               index=False)
    # prepare timestamp
    print('Done')


def decode_generated_data_mixed_gen3(_path, ref_path, _ip_list=None):
    remove_special_chars(_path)

    df = pd.read_csv(_path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    ref_df = pd.read_csv(ref_path)
    ref_df.dropna(inplace=True)
    ref_df.replace({'*': ''})

    cont_tags_map = list(map(lambda _name: (_name, ref_df[_name].min(), ref_df[_name].max()), GEN3_MIXED.col_cont))
    [decode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    [discretize(df, name) for name in GEN3_MIXED.temporary_binary]

    for name, bits in GEN3_MIXED.col_binary_dict.items():
        decode_text_binary(df, name, bits)

    [discretize(df, name) for name in GEN3_MIXED.col_discrete]

    df.to_csv(os.path.join(os.path.dirname(_path), f'{os.path.splitext(os.path.basename(_path))[0]}_decoded.csv'),
               index=False)
    # prepare timestamp
    print('Done')


if __name__ == '__main__':
    ip_list = ['2a00:1450:401b:80d::200e', '2a00:1450:401b:80e::2016', '2a03:2880:f016:19:face:b00c:0:2825',
               '35.186.224.47', '20.199.120.151', '198.252.206.25']
    REF_PATH = "..\\saved_data\\custom_data2\\p2_spotify_gen3_prepared_raw.csv"

    decode_generated_data_mixed_gen3(f'..\\saved_data\\wgan_{GEN}_data_generated_4_cols.csv', REF_PATH)


