import os

import pandas as pd
from preprocessors import encode_numeric_zscore, encode_numeric_min_max, remove_special_chars
from util.data_constants import col_binary_dict, GEN2, GEN


def bin2int(arr: [int]):
    res = 0
    for bit in arr:
        res = (res << 1) | bit
    return res


def decode_text_binary(df, name, bits: int):
    res = list(zip(*[df[f"{name}_{idx}"] for idx in range(bits)]))
    int_res = [bin2int(val) for val in res]

    [df.drop(f"{name}_{idx}", axis=1, inplace=True) for idx in range(bits)]
    df[name] = int_res


def retrieve_generated_data(path):
    df = pd.read_csv(path)

    for name, bits in col_binary_dict.items():
        decode_text_binary(df, name, bits)

    cols = ['Proto', 'Sport', 'Dport']
    for col in cols:
        df[col] = df.filter(regex=f"{col}-*").idxmax(1)
        [df.drop(name, axis=1, inplace=True) for name in df.filter(regex=f"{col}-").columns]

    print('done')
    return df


def retrieve_generated_data_gen2(path):
    df = pd.read_csv(path)

    for name, bits in GEN2.col_binary_dict.items():
        decode_text_binary(df, name, bits)

    for col in GEN2.col_dummy_decode:
        df[col] = df.filter(regex=f"{col}-*").idxmax(1)
        [df.drop(name, axis=1, inplace=True) for name in df.filter(regex=f"{col}-").columns]

    print('done')
    return df


def retrieve_generated_data_gen1(path):
    df = pd.read_csv(path)

    for name, bits in col_binary_dict.items():
        decode_text_binary(df, name, bits)

    for col in GEN2.col_dummy_decode:
        df[col] = df.filter(regex=f"{col}-*").idxmax(1)
        [df.drop(name, axis=1, inplace=True) for name in df.filter(regex=f"{col}-").columns]

    print('done')
    return df



def prep_data_as_cont(df, path):
    cont_tags_map = list(
        map(lambda _name: (_name, df[_name].mean(), df[_name].std()), ['dTos', 'sTos', 'SrcPkts', 'DstPkts']))
    [encode_numeric_zscore(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    [df.drop(val, axis=1, inplace=True) for val in ['Sport', 'Dport', 'Proto', 'weekday']]

    df.to_csv(os.path.join(os.path.dirname(path),
                           f'{os.path.splitext(os.path.basename(path))[0]}_cont_prepared.csv'),
              index=False)
    print('Done')


def prep_data_as_cont_gen2(df, path):
    cont_tags_map = list(
        map(lambda _name: (_name, df[_name].min(), df[_name].max()), GEN2.col_binary_dict.keys()))
    [encode_numeric_min_max(df, name, _min, _max) for (name, _min, _max) in cont_tags_map]

    [df.drop(val, axis=1, inplace=True) for val in ['Sport', 'Dport', 'Proto']]

    df.to_csv(os.path.join(os.path.dirname(path),
                           f'{os.path.splitext(os.path.basename(path))[0]}_cont_prepared.csv'),
              index=False)
    print('Done')


def prep_data_add_labels_gen2(path):
    df = pd.read_csv(path)

    cols = ['Dur', 'daytime', 'sTos', 'dTos', 'SrcBytes', 'DstBytes', 'SrcLoad', 'DstLoad', 'SrcRate', 'DstRate',
            'SrcPkts', 'DstPkts']
    df.columns = cols

    df.to_csv(os.path.join(os.path.dirname(path),
                           f'{os.path.splitext(os.path.basename(path))[0]}_cont_prepared.csv'),
              index=False)
    print('Done')


def get_min_max(path, col, _ip_list):
    remove_special_chars(path)

    # prepare timestamp
    df = pd.read_fwf(path)
    df.dropna(inplace=True)
    df.replace({'*': ''})

    if _ip_list is not None:
        df = df[lambda row: (row['DstAddr'].isin(_ip_list)) | (row['SrcAddr'].isin(_ip_list))]

    # normalize cont data
    return list(map(lambda _name: (_name, df[_name].min(), df[_name].max()), col))


def prep_data_to_flows(df, min_dur, max_dur, _path):
    df['Dur'] = df['Dur'] * (max_dur - min_dur) + min_dur

    df.to_csv(os.path.join(os.path.dirname(_path),
                           f'{os.path.splitext(os.path.basename(_path))[0]}_cont_prepared_flows.csv'),
              index=False)
    print('Done')


def compare_generated_flows(path1, path2, port=5051):
    df1 = pd.read_csv(path1)
    df1.dropna(inplace=True)
    df1.replace({'*': ''})

    df2 = pd.read_csv(path2, delim_whitespace=True)
    df2.dropna(inplace=True)
    df2.replace({'*': ''})

    # df1 = df1[lambda row: (row['Sport'].isin([port])) | (row['Dport'].isin([port]))]

    print('done')


if __name__ == '__main__':
    ip_list = ['2a00:1450:401b:80d::200e', '2a00:1450:401b:80e::2016', '2a03:2880:f016:19:face:b00c:0:2825',
               '35.186.224.47', '20.199.120.151', '198.252.206.25']

    path = f'..\\saved_data\\wgan_GEN_05_data_generated_6_desc.csv'
    _, _min, _max = get_min_max('..\\saved_data\\custom_data\\p2_spotify.csv', ['Dur', 'SrcBytes', 'DstBytes', 'SrcLoad',
                                                                            'DstLoad', 'SrcRate', 'DstRate'], ip_list)[0]
    df = retrieve_generated_data_gen1(path)
    prep_data_to_flows(df, _min, _max, path)
    prep_data_as_cont_gen2(df, path)

    # prep_data_add_labels_gen2(path)

    # compare_generated_flows(f'..\\saved_data\\wgan_{GEN}_data_generated_0_desc_cont_prepared_flows.csv',
    #                         '..\\saved_data\\custom_data\\generated.csv')
