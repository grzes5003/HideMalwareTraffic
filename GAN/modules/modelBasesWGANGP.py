from tensorflow import keras
from tensorflow.keras import layers
noise_dim = 32
DATA_INPUT = (8, 1)


class GeneratorBase:
    @staticmethod
    def get_generator_model():
        latent_inputs = keras.Input(shape=(noise_dim,))
        x = layers.Dense(2 * 32, activation="relu")(latent_inputs)
        x = layers.BatchNormalization()(x)
        x = layers.Reshape((2, 32))(x)
        x = layers.Conv1DTranspose(32, 3, activation="relu", strides=2, padding="same")(x)
        x = layers.Conv1DTranspose(16, 3, activation="relu", strides=2, padding="same")(x)
        generator_outputs = layers.Conv1DTranspose(1, 3, activation="sigmoid", padding="same")(x)
        generator = keras.Model(latent_inputs, generator_outputs, name="generator")
        generator.summary()
        return generator


class DiscriminatorBase:
    @staticmethod
    def get_discriminator_model():
        critic_inputs = keras.Input(shape=DATA_INPUT)
        x = layers.Conv1D(16, 3, activation="relu", strides=2, padding="same")(critic_inputs)
        x = layers.Conv1D(32, 3, activation="relu", strides=2, padding="same")(x)
        x = layers.Flatten()(x)
        x = layers.Dropout(0.2)(x)
        x = layers.Dense(1, activation="linear")(x)

        discriminator = keras.Model(critic_inputs, x, name="discriminator")
        discriminator.summary()
        return discriminator
