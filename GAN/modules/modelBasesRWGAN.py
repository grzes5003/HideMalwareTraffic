import itertools

import tensorflow as tf
from keras import backend as K
from tensorflow.keras import layers
from tensorflow.python.framework import ops
from keras.utils.generic_utils import get_custom_objects
from GAN.modules.modelBases import upsample_block, conv_block


noise_dim = 32
DATA_INPUT = (8, 1)


class GeneratorBase:
    @staticmethod
    def get_generator_model():
        noise = layers.Input(shape=(noise_dim,))

        x = layers.Dense(32, use_bias=False)(noise)
        x = layers.Reshape((32, 1))(x)
        x = layers.LSTM(64, activation='sigmoid', return_sequences=True)(x)
        x = layers.LSTM(64, activation='sigmoid')(x)
        x = layers.Dense(8, use_bias=False, activation='sigmoid')(x)
        x = layers.Reshape(DATA_INPUT)(x)

        # At this point, we have an output which has the same shape as the input, (32, 32, 1).
        # We will use a Cropping2D layer to make it (28, 28, 1).
        # x = layers.Cropping1D(1)(x)

        g_model = tf.keras.models.Model(noise, x, name="generator")
        return g_model


class DiscriminatorBase:
    @staticmethod
    def get_discriminator_model():
        data_input = layers.Input(shape=DATA_INPUT)

        x = layers.BatchNormalization()(data_input)
        x = layers.Reshape((8, 1))(x)
        x = layers.LSTM(64, activation='softmax')(x)
        x = layers.Dense(1)(x)

        d_model = tf.keras.models.Model(data_input, x, name="discriminator")
        return d_model