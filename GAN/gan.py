import time

import tensorflow as tf
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import pandas as pd
import os


class GAN:
    def __init__(self):
        self.PATH = os.path.dirname(__file__)
        self.BUFFER_SIZE = 60000
        self.BATCH_SIZE = 256

        self.EPOCHS = 50
        self.noise_dim = 100
        self.num_examples_to_generate = 16

        self.checkpoint_dir = (os.path.join(self.PATH, '..\\saved_models\\gan_model'))
        self.checkpoint_prefix = os.path.join(self.checkpoint_dir, "ckpt")

        # You will reuse this seed overtime (so it's easier)
        # to visualize progress in the animated GIF)
        seed = tf.random.normal([self.num_examples_to_generate, self.noise_dim])

        self._generator = GAN.make_generator_model()
        self._discriminator = GAN.make_discriminator_model()

        self.cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)
        self.generator_optimizer = tf.keras.optimizers.Adam(1e-4)
        self.discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)
        self._x_normal = []
        self.prepare_data()

        self.checkpoint = tf.train.Checkpoint(generator_optimizer=self.generator_optimizer,
                                              discriminator_optimizer=self.discriminator_optimizer,
                                              generator=self._generator,
                                              discriminator=self._discriminator)

    def prepare_data(self):
        df_normal = pd.read_csv(os.path.join(self.PATH, '..\\saved_data\\df_attack.csv'))
        df_normal.drop('Unnamed: 0', axis=1, inplace=True)

        self._x_normal = df_normal.values

    def discriminator_loss(self, real_output, fake_output):
        real_loss = self.cross_entropy(tf.ones_like(real_output), real_output)
        fake_loss = self.cross_entropy(tf.zeros_like(fake_output), fake_output)
        total_loss = real_loss + fake_loss
        return total_loss

    def generator_loss(self, fake_output):
        return self.cross_entropy(tf.ones_like(fake_output), fake_output)

    @staticmethod
    def gen_random_data():
        generator = GAN.make_generator_model()

        noise = tf.random.normal([1, 100])
        generated_image = generator(noise, training=False)

        plt.imshow(generated_image[0, :, :, 0], cmap='gray')
        plt.show()

        discriminator = GAN.make_discriminator_model()
        decision = discriminator(generated_image)
        print(decision)

    @staticmethod
    def make_generator_model():
        model = tf.keras.Sequential()
        model.add(layers.Dense(10, use_bias=False, input_shape=(25,)))
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Reshape((5, 2)))
        assert model.output_shape == (None, 5, 2)  # Note: None is the batch size

        model.add(layers.Conv1DTranspose(5, (5), strides=(1), padding='same', use_bias=False))
        assert model.output_shape == (None, 5, 5)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv1DTranspose(5, (1), strides=(5), padding='same', use_bias=False))
        assert model.output_shape == (None, 25, 5)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv1DTranspose(1, (5), strides=(5), padding='same',
                                         use_bias=False, activation='tanh'))
        assert model.output_shape == (None, 125, 1)

        return model

    def make_generator_model2(self):
        model = tf.keras.Sequential(name="GENERATOR")
        model.add(layers.Dense(16 * 125, use_bias=False, input_shape=(25,)))
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Reshape((5, 400)))
        # assert model.output_shape == (None, 100, 20)  # Note: None is the batch size

        model.add(layers.Conv1DTranspose(200, (5), strides=(5), padding='same', use_bias=False))
        # assert model.output_shape == (None, 50, 5)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv1DTranspose(100, (1), strides=(1), padding='same', use_bias=False))
        # assert model.output_shape == (None, 25, 5)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())

        model.add(layers.Conv1DTranspose(1, (5), strides=(5), padding='same',
                                         use_bias=False, activation='tanh'))
        # assert model.output_shape == (None, 125, 1)

        return model


    @staticmethod
    def make_discriminator_model():
        model = tf.keras.Sequential()
        model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',
                                input_shape=[28, 28, 1]))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Flatten())
        model.add(layers.Dense(1))

        return model

    @tf.function
    def train_step(self, images):
        noise = tf.random.normal([self.BATCH_SIZE, self.noise_dim])

        with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
            generated_images = self._generator(noise, training=True)

            real_output = self._discriminator(images, training=True)
            fake_output = self._discriminator(generated_images, training=True)

            gen_loss = self.generator_loss(fake_output)
            disc_loss = self.discriminator_loss(real_output, fake_output)

        gradients_of_generator = gen_tape.gradient(gen_loss, self._generator.trainable_variables)
        gradients_of_discriminator = disc_tape.gradient(disc_loss, self._discriminator.trainable_variables)

        self.generator_optimizer.apply_gradients(zip(gradients_of_generator, self._generator.trainable_variables))
        self.discriminator_optimizer.apply_gradients(
            zip(gradients_of_discriminator, self._discriminator.trainable_variables))

    def train(self, dataset, epochs):
        for epoch in range(epochs):
            start = time.time()

            for image_batch in dataset:
                self.train_step(image_batch)

            # Save the model every 15 epochs
            if (epoch + 1) % 15 == 0:
                self.checkpoint.save(file_prefix=self.checkpoint_prefix)

            print('Time for epoch {} is {} sec'.format(epoch + 1, time.time() - start))


if __name__ == '__main__':
    # os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

    print('starting...')
    gan = GAN()
