import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from util.data_constants import GEN
DATA_INPUT = (74, 1)
latent_dim = 128


def get_discriminator():
    discriminator = keras.Sequential(
        [
            keras.Input(shape=DATA_INPUT),
            layers.Conv1D(128, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1D(256, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1D(256, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Flatten(),
            layers.Dropout(0.2),
            layers.Dense(1, activation="sigmoid"),
        ],
        name="discriminator",
    )
    discriminator.summary()
    return discriminator


def get_generator():
    generator = keras.Sequential(
        [
            keras.Input(shape=(latent_dim,)),
            layers.Dense(5 * 16),
            layers.Reshape((5, 16)),
            layers.Conv1DTranspose(16, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1DTranspose(32, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1DTranspose(64, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1DTranspose(128, kernel_size=4, strides=2, padding="same"),
            layers.LeakyReLU(alpha=0.2),
            layers.Conv1D(1, kernel_size=5, padding="same", activation="sigmoid"),
            layers.Cropping1D(3)
        ],
        name="generator",
    )
    generator.summary()
    return generator


class GAN(keras.Model):
    def __init__(self, discriminator, generator, latent_dim):
        super(GAN, self).__init__()
        self.discriminator = discriminator
        self.generator = generator
        self.latent_dim = latent_dim

    def compile(self, d_optimizer, g_optimizer, loss_fn):
        super(GAN, self).compile()
        self.d_optimizer = d_optimizer
        self.g_optimizer = g_optimizer
        self.loss_fn = loss_fn
        self.d_loss_metric = keras.metrics.Mean(name="d_loss")
        self.g_loss_metric = keras.metrics.Mean(name="g_loss")

    @property
    def metrics(self):
        return [self.d_loss_metric, self.g_loss_metric]

    def train_step(self, real_images):
        # Sample random points in the latent space
        batch_size = tf.shape(real_images)[0]
        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))

        # Decode them to fake images
        generated_images = self.generator(random_latent_vectors)

        # Combine them with real images
        combined_images = tf.concat([generated_images, real_images], axis=0)

        # Assemble labels discriminating real from fake images
        labels = tf.concat(
            [tf.ones((batch_size, 1)), tf.zeros((batch_size, 1))], axis=0
        )
        # Add random noise to the labels - important trick!
        labels += 0.05 * tf.random.uniform(tf.shape(labels))

        # Train the discriminator
        with tf.GradientTape() as tape:
            predictions = self.discriminator(combined_images)
            d_loss = self.loss_fn(labels, predictions)
        grads = tape.gradient(d_loss, self.discriminator.trainable_weights)
        self.d_optimizer.apply_gradients(
            zip(grads, self.discriminator.trainable_weights)
        )

        # Sample random points in the latent space
        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))

        # Assemble labels that say "all real images"
        misleading_labels = tf.zeros((batch_size, 1))

        # Train the generator (note that we should *not* update the weights
        # of the discriminator)!
        with tf.GradientTape() as tape:
            predictions = self.discriminator(self.generator(random_latent_vectors))
            g_loss = self.loss_fn(misleading_labels, predictions)
        grads = tape.gradient(g_loss, self.generator.trainable_weights)
        self.g_optimizer.apply_gradients(zip(grads, self.generator.trainable_weights))

        # Update metrics
        self.d_loss_metric.update_state(d_loss)
        self.g_loss_metric.update_state(g_loss)
        return {
            "d_loss": self.d_loss_metric.result(),
            "g_loss": self.g_loss_metric.result(),
        }


class GANMonitor(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if epoch % 5 == 0:
            self.model.generator.save(f'..\\saved_models\\{GEN}\\gen')
            self.model.discriminator.save(f'..\\saved_models\\{GEN}\\dis')


if __name__ == '__main__':
    LOAD_LATEST_MODEL = True
    LAST_EPOCH = 100

    # DATA_INPUT = (12, 1)
    BATCH_SIZE = 512
    BUFFER_SIZE = 6571

    # Create models
    if LOAD_LATEST_MODEL:
        d_model = keras.models.load_model(f'..\\saved_models\\{GEN}\\dis')
        g_model = keras.models.load_model(f'..\\saved_models\\{GEN}\\gen')
    else:
        d_model = get_discriminator()
        g_model = get_generator()

    gan = GAN(discriminator=d_model, generator=g_model, latent_dim=latent_dim)

    df = pd.read_csv('..\\saved_data\\custom_data2\\p2_spotify_gen3_prepared_mixed_ver.csv')

    x_all = df.values
    print(x_all.shape)

    x_all = x_all.reshape(x_all.shape[0], *DATA_INPUT).astype('float32')
    x_all = tf.data.Dataset.from_tensor_slices(x_all).batch(BATCH_SIZE)

    epochs = 400 + (LAST_EPOCH if LOAD_LATEST_MODEL else 0)
    cbk = GANMonitor()

    generator_optimizer = keras.optimizers.Adam(
        learning_rate=0.0001, beta_1=0.5, beta_2=0.9
    )
    discriminator_optimizer = keras.optimizers.Adam(
        learning_rate=0.0001, beta_1=0.5, beta_2=0.9
    )

    gan.compile(
        d_optimizer=discriminator_optimizer,
        g_optimizer=generator_optimizer,
        loss_fn=keras.losses.BinaryCrossentropy(),
    )

    gan.fit(x_all, batch_size=BATCH_SIZE, epochs=epochs, initial_epoch=(LAST_EPOCH if LOAD_LATEST_MODEL else 0), callbacks=[cbk])

    gan.generator.save(f'..\\saved_models\\{GEN}\\gen')
    gan.discriminator.save(f'..\\saved_models\\{GEN}\\dis')
