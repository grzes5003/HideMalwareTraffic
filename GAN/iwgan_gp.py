from GAN.modules.modelBasesIWGAN import noise_dim, GeneratorBaseIWGAN, DiscriminatorBaseIWGAN, DATA_INPUT1, DATA_INPUT2
from util.data_constants import all_tags_after, desc_tags_expanded, GEN
from GAN.modules.modelBases import GeneratorBase, DiscriminatorBase
from tensorflow import keras
import tensorflow as tf
import pandas as pd
import numpy as np
import itertools
import re


class IntegratedWganGP(keras.Model):
    def __init__(
        self,
        discriminator,
        generator,
        latent_dim,
        discriminator_extra_steps=5,
        gp_weight=10.0,
    ):
        super(IntegratedWganGP, self).__init__()
        self.discriminator = discriminator
        self.generator = generator
        self.latent_dim = latent_dim
        self.d_steps = discriminator_extra_steps
        self.gp_weight = gp_weight

    def compile(self, d_optimizer, g_optimizer, d_loss_fn, g_loss_fn):
        super(IntegratedWganGP, self).compile(run_eagerly=True)
        self.d_optimizer = d_optimizer
        self.g_optimizer = g_optimizer
        self.d_loss_fn = d_loss_fn
        self.g_loss_fn = g_loss_fn

    def gradient_penalty(self, batch_size, real_samples, fake_samples):
        """ Calculates the gradient penalty.

        This loss is calculated on an interpolated image
        and added to the discriminator loss.
        """
        # Get the interpolated image
        alpha = tf.random.normal([batch_size, 1, 1], 0.0, 1.0)
        interpolated = []
        for real, fake in zip(real_samples, fake_samples):
            diff = fake - real
            interpolated.append(real + alpha * diff)
        interpolated = tuple(interpolated)
        with tf.GradientTape() as gp_tape:
            gp_tape.watch(interpolated)
            # 1. Get the discriminator output for this interpolated image.
            pred = self.discriminator(interpolated, training=True)

        # 2. Calculate the gradients w.r.t to this interpolated image.
        grads = gp_tape.gradient(pred, [interpolated])[0]
        # 3. Calculate the norm of the gradients.
        norms = [tf.sqrt(tf.reduce_sum(tf.square(grad), axis=[1, 2])) for grad in grads]
        gp = [tf.reduce_mean((norm - 1.0) ** 2) for norm in norms]
        return gp

    def train_step(self, real_samples):
        if isinstance(real_samples, tuple):
            pass
            # real_samples = real_samples[0]

        # Get the batch size

        batch_size = tf.shape(real_samples[0])[0]

        # For each batch, we are going to perform the
        # following steps as laid out in the original paper:
        # 1. Train the generator and get the generator loss
        # 2. Train the discriminator and get the discriminator loss
        # 3. Calculate the gradient penalty
        # 4. Multiply this gradient penalty with a constant weight factor
        # 5. Add the gradient penalty to the discriminator loss
        # 6. Return the generator and discriminator losses as a loss dictionary

        # Train the discriminator first. The original paper recommends training
        # the discriminator for `x` more steps (typically 5) as compared to
        # one step of the generator. Here we will train it for 3 extra steps
        # as compared to 5 to reduce the training time.
        for i in range(self.d_steps):
            # Get the latent vector
            random_latent_vectors = tf.random.normal(
                shape=(batch_size, self.latent_dim)
            )
            with tf.GradientTape(persistent=True) as tape:
                # Generate fake images from the latent vector
                fake_samples = self.generator(random_latent_vectors, training=True)
                # Get the logits for the fake images
                fake_logits = self.discriminator(fake_samples, training=True)
                # Get the logits for the real images
                real_logits = self.discriminator(real_samples, training=True)

                # Calculate the discriminator loss using the fake and real image logits
                d_cost = self.d_loss_fn(real_img=real_logits, fake_img=fake_logits)
                # Calculate the gradient penalty
                gp = self.gradient_penalty(batch_size, real_samples, fake_samples)
                # Add the gradient penalty to the original discriminator loss
                d_loss = [(d_cost + g * self.gp_weight) for g in gp]
                d_loss.append(d_cost + (gp[0]-gp[1]) * self.gp_weight)

            # Get the gradients w.r.t the discriminator loss
            s_layers = [r'l1', r'l2', r'^(?!l1|l2)']
            layers = IntegratedWganGP._get_layers_weights_by_name(self.discriminator.trainable_variables, s_layers)
            d_gradient = [tape.gradient(d_l, sub_layers) for d_l, sub_layers in zip(d_loss, layers)]
            # Update the weights of the discriminator using the discriminator optimizer
            self.d_optimizer.apply_gradients(
                zip(list(itertools.chain(*d_gradient)), list(itertools.chain(*layers)))
            )
        del tape
        # Train the generator
        # Get the latent vector
        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))
        with tf.GradientTape() as tape:
            # Generate fake images using the generator
            generated_images = self.generator(random_latent_vectors, training=True)
            # Get the discriminator logits for fake images
            gen_img_logits = self.discriminator(generated_images, training=True)
            # Calculate the generator loss
            g_loss = self.g_loss_fn(gen_img_logits)

        # Get the gradients w.r.t the generator loss
        gen_gradient = tape.gradient(g_loss, self.generator.trainable_variables)
        # Update the weights of the generator using the generator optimizer
        self.g_optimizer.apply_gradients(
            zip(gen_gradient, self.generator.trainable_variables)
        )
        return {"d_loss": tf.math.reduce_mean(d_loss), "g_loss": g_loss}

    @staticmethod
    def _get_layers_weights_by_name(l_weights, s_layers):
        return [list(filter(lambda v: re.match(reg, v.name), l_weights)) for reg in s_layers]


class GANMonitor(keras.callbacks.Callback):
    def __init__(self, num_img=6, latent_dim=noise_dim):
        self.num_img = num_img
        self.latent_dim = latent_dim

    def on_epoch_end(self, epoch, logs=None):
        if epoch % 5 == 0:
            self.model.generator.save(f'..\\saved_models\\{GEN}\\gen')
            self.model.discriminator.save(f'..\\saved_models\\{GEN}\\dis')

        # random_latent_vectors = tf.random.normal(shape=(self.num_img, self.latent_dim))
        # generated_images = self.model.generator(random_latent_vectors)
        # generated_images = (generated_images * 127.5) + 127.5
        #
        # for i in range(self.num_img):
        #     img = generated_images[i].numpy()
        #     img = keras.preprocessing.image.array_to_img(img)
        #     img.save("generated_img_{i}_{epoch}.png".format(i=i, epoch=epoch))


if __name__ == '__main__':
    LOAD_LATEST_MODEL = False
    LAST_EPOCH = 500

    # DATA_INPUT = (12, 1)
    BATCH_SIZE = 512
    BUFFER_SIZE = 6571

    # Create models
    if LOAD_LATEST_MODEL:
        d_model = keras.models.load_model(f'..\\saved_models\\{GEN}\\dis')
        g_model = keras.models.load_model(f'..\\saved_models\\{GEN}\\gen')
    else:
        d_model = DiscriminatorBaseIWGAN.get_discriminator_model()
        g_model = GeneratorBaseIWGAN.get_generator_model()

    # Load data
    df = pd.read_csv('..\\saved_data\\custom_data\\p2_spotify_prepared_GEN2.csv')

    x_all = df.values
    print(x_all.shape)

    x_1 = df.iloc[:, 0:DATA_INPUT1[0]].values
    x_2 = df.iloc[:, DATA_INPUT1[0]:].values
    x_1 = x_1.reshape(x_1.shape[0], *DATA_INPUT1).astype('float32')
    x_2 = x_2.reshape(x_2.shape[0], *DATA_INPUT2).astype('float32')
    # {'input_1': x_1, 'input_2': x_2}
    x_all = tf.data.Dataset.from_tensor_slices((x_1, x_2)).batch(BATCH_SIZE)

    # Instantiate the optimizer for both networks
    # (learning_rate=0.0002, beta_1=0.5 are recommended)
    generator_optimizer = keras.optimizers.Adam(
        learning_rate=0.0004, beta_1=0.5, beta_2=0.8
    )
    discriminator_optimizer = keras.optimizers.Adam(
        learning_rate=0.0002, beta_1=0.5, beta_2=0.8
    )

    # Define the loss functions for the discriminator,
    # which should be (fake_loss - real_loss).
    # We will add the gradient penalty later to this loss function.
    def discriminator_loss(real_img, fake_img):
        real_loss = tf.reduce_mean(real_img)
        fake_loss = tf.reduce_mean(fake_img)
        return fake_loss - real_loss

    # Define the loss functions for the generator.
    def generator_loss(fake_img):
        return -tf.reduce_mean(fake_img)

    # Set the number of epochs for trainining.
    epochs = 500 + (LAST_EPOCH if LOAD_LATEST_MODEL else 0)

    # Instantiate the customer `GANMonitor` Keras callback.
    cbk = GANMonitor(num_img=3, latent_dim=noise_dim)

    # Instantiate the WGAN model.
    wgan = IntegratedWganGP(
        discriminator=d_model,
        generator=g_model,
        latent_dim=noise_dim,
        discriminator_extra_steps=3,
    )

    # Compile the WGAN model.
    wgan.compile(
        d_optimizer=discriminator_optimizer,
        g_optimizer=generator_optimizer,
        g_loss_fn=generator_loss,
        d_loss_fn=discriminator_loss,
    )

    # Start training the model.
    wgan.fit(x_all, batch_size=BATCH_SIZE, epochs=epochs, initial_epoch=(LAST_EPOCH if LOAD_LATEST_MODEL else 0), callbacks=[cbk])

    wgan.generator.save(f'..\\saved_models\\{GEN}\\gen')
    wgan.discriminator.save(f'..\\saved_models\\{GEN}\\dis')
