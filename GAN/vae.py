import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

from util.data_constants import GEN

latent_dim = 2
DATA_INPUT = (8, 1)


class Sampling(layers.Layer):
    """Uses (z_mean, z_log_var) to sample z, the vector encoding a digit."""
    def call(self, inputs):
        z_mean, z_log_var = inputs
        batch = tf.shape(z_mean)[0]
        dim = tf.shape(z_mean)[1]
        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))
        return z_mean + tf.exp(0.5 * z_log_var) * epsilon


def encoder():
    encoder_inputs = keras.Input(shape=(8, 1))
    x = layers.Conv1D(16, 3, activation="relu", strides=2, padding="same")(encoder_inputs)
    x = layers.Conv1D(32, 3, activation="relu", strides=2, padding="same")(x)
    x = layers.Flatten()(x)
    x = layers.Dense(8, activation="relu")(x)
    z_mean = layers.Dense(latent_dim, name="z_mean")(x)
    z_log_var = layers.Dense(latent_dim, name="z_log_var")(x)
    z = Sampling()([z_mean, z_log_var])
    encoder = keras.Model(encoder_inputs, [z_mean, z_log_var, z], name="encoder")
    encoder.summary()
    return encoder


def decoder():
    latent_inputs = keras.Input(shape=(latent_dim,))
    x = layers.Dense(2 * 32, activation="relu")(latent_inputs)
    x = layers.Reshape((2, 32))(x)
    x = layers.Conv1DTranspose(32, 3, activation="relu", strides=2, padding="same")(x)
    x = layers.Conv1DTranspose(16, 3, activation="relu", strides=2, padding="same")(x)
    decoder_outputs = layers.Conv1DTranspose(1, 3, activation="sigmoid", padding="same")(x)
    decoder = keras.Model(latent_inputs, decoder_outputs, name="decoder")
    decoder.summary()
    return decoder


class VAE(keras.Model):
    def __init__(self, encoder, decoder, **kwargs):
        super(VAE, self).__init__(**kwargs)
        self.encoder = encoder
        self.decoder = decoder
        self.total_loss_tracker = keras.metrics.Mean(name="total_loss")
        self.reconstruction_loss_tracker = keras.metrics.Mean(
            name="reconstruction_loss"
        )
        self.kl_loss_tracker = keras.metrics.Mean(name="kl_loss")

    @property
    def metrics(self):
        return [
            self.total_loss_tracker,
            self.reconstruction_loss_tracker,
            self.kl_loss_tracker,
        ]

    def train_step(self, data):
        with tf.GradientTape() as tape:
            z_mean, z_log_var, z = self.encoder(data)
            reconstruction = self.decoder(z)
            reconstruction_loss = tf.reduce_mean(
                tf.reduce_sum(
                    keras.losses.mean_squared_logarithmic_error(data, reconstruction), axis=1
                )
            )
            kl_loss = -0.02 * (1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var))
            kl_loss = tf.reduce_mean(tf.reduce_sum(kl_loss, axis=1))
            total_loss = reconstruction_loss + kl_loss
        grads = tape.gradient(total_loss, self.trainable_weights)
        self.optimizer.apply_gradients(zip(grads, self.trainable_weights))
        self.total_loss_tracker.update_state(total_loss)
        self.reconstruction_loss_tracker.update_state(reconstruction_loss)
        self.kl_loss_tracker.update_state(kl_loss)
        return {
            "loss": self.total_loss_tracker.result(),
            "reconstruction_loss": self.reconstruction_loss_tracker.result(),
            "kl_loss": self.kl_loss_tracker.result(),
        }


class VAEMonitor(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if epoch % 5 == 0:
            self.model.encoder.save(f'..\\saved_models\\{GEN}\\enc')
            self.model.decoder.save(f'..\\saved_models\\{GEN}\\dec')


if __name__ == '__main__':
    LOAD_LATEST_MODEL = True
    BATCH_SIZE = 64
    LAST_EPOCH = 600
    EPOCHS = 1200

    df = pd.read_csv('..\\saved_data\\custom_data2\\p2_spotify_gen3_prepared.csv')

    x_all = df.values
    print(x_all.shape)

    # (x_train, _), (x_test, _) = keras.datasets.mnist.load_data()
    # mnist_digits = np.concatenate([x_train, x_test], axis=0)
    # mnist_digits = np.expand_dims(mnist_digits, -1).astype("float32") / 255

    x_all = x_all.reshape(x_all.shape[0], *DATA_INPUT).astype('float32')
    x_all = tf.data.Dataset.from_tensor_slices(x_all).batch(BATCH_SIZE)

    # Create models
    if LOAD_LATEST_MODEL:
        _encoder = keras.models.load_model(f'..\\saved_models\\{GEN}\\enc')
        _decoder = keras.models.load_model(f'..\\saved_models\\{GEN}\\dec')
    else:
        _encoder = encoder()
        _decoder = decoder()

    cbk = VAEMonitor()
    vae = VAE(_encoder, _decoder)
    vae.compile(optimizer=keras.optimizers.Adam(), run_eagerly=True)
    vae.fit(x_all, epochs=EPOCHS, batch_size=BATCH_SIZE, initial_epoch=(LAST_EPOCH if LOAD_LATEST_MODEL else 0), callbacks=[cbk])

    vae.encoder.save(f'..\\saved_models\\{GEN}\\enc')
    vae.decoder.save(f'..\\saved_models\\{GEN}\\dec')
