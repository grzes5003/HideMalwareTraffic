import os
import unittest
import numpy as np
import pandas as pd
from unittest import TestCase
import matplotlib.pyplot as plt
from KMeansWithRF import KMeansWithRF
from util.data_constants import MIXED_CSV_PATH
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


class TestKMeansWithRF(TestCase):
    @classmethod
    def setUpClass(cls):
        PATH = os.path.dirname(__file__)

        df_all = pd.read_csv(os.path.join(PATH, '..\\saved_data\\KDDTrainData\\df_all.csv'))
        df_all.drop('Unnamed: 0', axis=1, inplace=True)

        x_labels = df_all['class'].values
        df_all = df_all.drop('class', axis=1)

        x_all = df_all.values

        _, cls.x_test_all, _, cls.x_test_label = train_test_split(
            x_all, x_labels, test_size=0.25, random_state=42)

    @unittest.skip
    def test_train_model(self):
        KMeansWithRF.train_model()

    @unittest.skip
    def test_rate_flow(self):
        kmw = KMeansWithRF()
        pred = kmw.rate_flow(self.x_test_all)

        errors = abs(pred - self.x_test_label)
        print('Mean Absolute Error:', round(np.mean(errors), 6), 'degrees')

        mape = 100 * (errors / np.sum(self.x_test_label))

        accuracy = 100 - np.mean(mape)
        print('Accuracy:', round(accuracy, 6), '%')

    @unittest.skip
    def test_custom_data(self):
        kmw = KMeansWithRF()

        PATH = os.path.dirname(__file__)
        df_custom_attack_desc = pd.read_csv(os.path.join(PATH, '..\\saved_data\\data_generated_desc.csv'))
        df_custom_attack_desc.drop('Unnamed: 0', axis=1, inplace=True)
        x_custom_attack_desc = df_custom_attack_desc.values

        pred = kmw.rate_flow(x_custom_attack_desc)
        errors = abs(np.sum(pred) - x_custom_attack_desc.shape[0])

        print('Mean Absolute Error:', round(np.mean(errors), 6), 'degrees')

        mape = 100 * (errors / x_custom_attack_desc.shape[0])

        accuracy = 100 - np.mean(mape)
        print('Accuracy:', round(accuracy, 6), '%')

    @unittest.skip
    def test_custom_data_mixed(self):
        kmw = KMeansWithRF()

        PATH = os.path.dirname(__file__)
        df_custom_attack_desc = pd.read_csv(os.path.join(PATH, '..\\saved_data\\data_generated_desc.csv'))
        df_normal = pd.read_csv(os.path.join(PATH, '../saved_data/KDDTrainData/df_normal.csv'))

        df_custom_attack_desc.drop('Unnamed: 0', axis=1, inplace=True)
        df_normal.drop('Unnamed: 0', axis=1, inplace=True)

        df_custom_attack_desc['class'] = 1
        df_normal['class'] = 0

        df_mixed = df_normal.append(df_custom_attack_desc).sample(frac=1, random_state=42)
        x_labels = df_mixed['class'].values

        df_mixed = df_mixed.drop('class', axis=1)
        x_mixed = df_mixed.values

        pred = kmw.rate_flow(x_mixed)

        errors = abs(pred - x_labels)
        pred_desc = [0 if p < 0.5 else 1 for p in pred]

        print('Mean Absolute Error:', round(np.mean(errors), 6), 'degrees')

        TP = sum([1 if p == 1 and x == 1 else 0 for p, x in zip(pred_desc, x_labels)])
        FP = sum([1 if p == 1 and x == 0 else 0 for p, x in zip(pred_desc, x_labels)])
        TN = sum([1 if p == 0 and x == 0 else 0 for p, x in zip(pred_desc, x_labels)])
        FN = sum([1 if p == 0 and x == 1 else 0 for p, x in zip(pred_desc, x_labels)])
        tn, fp, fn, tp = confusion_matrix(x_labels, pred_desc).ravel()

        ConfusionMatrixDisplay.from_predictions(x_labels, pred_desc)
        plt.show()

        print(f'Percentage of correctly detected anomalies in all anomalies: {round(TP / (TP + FN), 4)}')
        print(f'Percentage of detected anomalies in all overall traffic: {round((TP + FP) / len(x_labels), 4)}')
        print(f'Percentage of falsely detected anomalies in all overall traffic: {round(FP / len(x_labels), 4)}')

        mape = 100 * (errors / np.sum(x_labels))
        accuracy = 100 - np.mean(mape)
        print('Accuracy:', round(accuracy, 6), '%')

    def test_custom_data_wgangp(self):
        kmw = KMeansWithRF()

        df_mixed = pd.read_csv(MIXED_CSV_PATH)

        x_labels_big = df_mixed['class'].values
        df_mixed = df_mixed.drop('class', axis=1)
        x_mixed = df_mixed.values

        _, x_test, _, x_labels = train_test_split(
            x_mixed, x_labels_big, test_size=0.25, random_state=42)

        print(f' x_test: {x_test.shape};'
              f' x_labels: {x_labels.shape};'
              f' x_mixed: {x_mixed.shape};'
              f' x_labels_big: {x_labels_big.shape}')

        pred = kmw.rate_flow(x_test)
        errors = abs(pred - x_labels)
        pred_desc = [0 if p < 0.5 else 1 for p in pred]

        tn, fp, fn, tp = confusion_matrix(x_labels, pred_desc).ravel()

        text = f"""
        Percentage of correctly detected anomalies in all anomalies: {round(tp / (tp + fn), 4)}
        Percentage of detected anomalies in all overall traffic: {round((tp + fp) / len(x_labels), 4)}
        Percentage of falsely detected anomalies in all overall traffic: {round(fp / len(x_labels), 4)}
        """

        text_short = f"""
        correctly detected anomalies in all anomalies: {round(tp / (tp + fn), 4)}
        detected anomalies in all overall traffic: {round((tp + fp) / len(x_labels), 4)}
        falsely detected anomalies in all overall traffic: {round(fp / len(x_labels), 4)}
        """

        ConfusionMatrixDisplay.from_predictions(x_labels, pred_desc)
        plt.figtext(0.05, 0, text_short, fontsize=5, va="bottom", ha="left")
        plt.legend('RandomForest')
        plt.show()

        mape = 100 * (errors / np.sum(x_labels))
        accuracy = 100 - np.mean(mape)
        print('Accuracy:', round(accuracy, 6), '%')