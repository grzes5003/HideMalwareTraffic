import os
import pickle
import numpy as np
import pandas as pd
from typing import Tuple
from BlackBoxBase import BlackBoxBase
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.cluster import KMeans


class KMeansWithRF(BlackBoxBase):
    def __init__(self):
        self.model = KMeansWithRF.load_model()

    def rate_flow(self, flow: np.ndarray):
        return self.model.predict(flow)

    @staticmethod
    def load_model():
        PATH = os.path.dirname(__file__)
        with open(os.path.join(PATH, '../saved_models/GEN_04/model_rf.pkl'), 'rb') as file:
            model = pickle.load(file)
        return model

    @staticmethod
    def train_model():
        PATH = os.path.dirname(__file__)
        rf = RandomForestRegressor(n_estimators=100, random_state=42)

        # df_normal = pd.read_csv('saved_data/df_normal.csv')
        df_all = pd.read_csv(os.path.join(PATH, '..\\saved_data\\p2_spotify_prepared_mixed.csv'))
        # df_all.drop('Unnamed: 0', axis=1, inplace=True)

        x_labels = df_all['class'].values
        df_all = df_all.drop('class', axis=1)

        x_all = df_all.values

        x_train_all, _, x_train_label, _ = train_test_split(
            x_all, x_labels, test_size=0.25, random_state=42)

        rf.fit(x_train_all, x_train_label)

        with open(os.path.join(PATH, '..\\saved_models\\GEN_04\\model_rf.pkl'), 'wb') as file:
            pickle.dump(rf, file)


if __name__ == '__main__':
    KMeansWithRF.train_model()
