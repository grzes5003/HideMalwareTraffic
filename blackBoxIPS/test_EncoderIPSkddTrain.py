import os
import unittest

import pandas as pd
from unittest import TestCase
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from blackBoxIPS.EncoderIPSkddTrain import EncoderIPSkddTrain
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


@unittest.SkipTest
class TestEncoderIPSkddTrain(TestCase):
    @classmethod
    def setUpClass(cls):
        PATH = os.path.dirname(__file__)

        df_attack = pd.read_csv(os.path.join(PATH, '..\\saved_data\\KDDTrainData\\df_attack.csv'))
        df_normal = pd.read_csv(os.path.join(PATH, '../saved_data/KDDTrainData/df_normal.csv'))

        df_normal.drop('Unnamed: 0', axis=1, inplace=True)
        df_attack.drop('Unnamed: 0', axis=1, inplace=True)

        cls.x_normal = df_normal.values
        cls.x_attack = df_attack.values

    def test_rate_flow(self):
        x_attack1, x_attack2 = train_test_split(
            self.x_attack, test_size=0.25, random_state=31)
        x_attack3, x_attack4 = train_test_split(
            self.x_attack, test_size=0.60, random_state=16)

        x_normal_train1, _ = train_test_split(
            self.x_normal, test_size=0.25, random_state=32)
        x_normal_train2, _ = train_test_split(
            self.x_normal, test_size=0.30, random_state=76)
        x_normal_train3, _ = train_test_split(
            self.x_normal, test_size=0.20, random_state=13)

        enc_ips = EncoderIPSkddTrain()
        scores = list()
        scores.append(enc_ips.rate_flow(self.x_attack))
        scores.append(enc_ips.rate_flow(x_attack1))
        scores.append(enc_ips.rate_flow(x_attack3))
        scores.append(enc_ips.rate_flow(x_normal_train1))
        scores.append(enc_ips.rate_flow(x_normal_train2))
        scores.append(enc_ips.rate_flow(x_normal_train3))

        print(scores)
        self.assertFalse(any([score[0] for score in scores[0:3]]))
        self.assertTrue(all([score[0] for score in scores[3:]]))

    def test_custom_data(self):
        PATH = os.path.dirname(__file__)
        df_custom_attack = pd.read_csv(os.path.join(PATH, '..\\saved_data\\data_generated.csv'))
        df_custom_attack_desc = pd.read_csv(os.path.join(PATH, '..\\saved_data\\data_generated_desc.csv'))

        df_custom_attack_desc.drop('Unnamed: 0', axis=1, inplace=True)

        x_custom_attack = df_custom_attack.values
        x_custom_attack_desc = df_custom_attack_desc.values

        x_normal_train1, _ = train_test_split(
            self.x_normal, test_size=0.25, random_state=32)

        enc_ips = EncoderIPSkddTrain()
        score1 = enc_ips.rate_flow(x_custom_attack)
        score2 = enc_ips.rate_flow(x_normal_train1)
        score3 = enc_ips.rate_flow(x_custom_attack_desc)
        print(score1)
        print(score2)
        print(score3)

        self.assertTrue(score1)
        self.assertTrue(score2)
        self.assertTrue(score3)

    def test_custom_data_1b1(self):
        PATH = os.path.dirname(__file__)
        df_custom_attack_desc = pd.read_csv(os.path.join(PATH, '..\\saved_data\\data_generated_desc.csv'))
        df_normal = pd.read_csv(os.path.join(PATH, '../saved_data/KDDTrainData/df_normal.csv'))

        df_custom_attack_desc.drop('Unnamed: 0', axis=1, inplace=True)
        df_normal.drop('Unnamed: 0', axis=1, inplace=True)

        df_custom_attack_desc['class'] = 1
        df_normal['class'] = 0

        df_mixed = df_normal.append(df_custom_attack_desc).sample(frac=1, random_state=42)
        x_labels = df_mixed['class'].values

        df_mixed = df_mixed.drop('class', axis=1)

        x_mixed = df_mixed.values[:5000]
        x_labels = x_labels[:5000]

        enc_ips = EncoderIPSkddTrain()
        pred = [1 if enc_ips.rate_flow(val)[0] else 0 for val in x_mixed]
        TN, FP, FN, TP = confusion_matrix(x_labels, pred).ravel()

        ConfusionMatrixDisplay.from_predictions(x_labels, pred)
        plt.show()

        print(f'Percentage of correctly detected anomalies in all anomalies: {round(TP / (TP + FN), 4)}')
        print(f'Percentage of detected anomalies in all overall traffic: {round((TP + FP) / len(x_labels), 4)}')
        print(f'Percentage of falsely detected anomalies in all overall traffic: {round(FP / len(x_labels), 4)}')

