from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from util.data_constants import MIXED_CSV_PATH
from blackBoxIPS.SVM import SVMachines
import matplotlib.pyplot as plt
from unittest import TestCase
import pandas as pd
import numpy as np
import unittest
import os


class TestSVMachines(TestCase):
    @unittest.skip
    def test_rate_flow(self):
        SVMachines.train_model()

    def test_custom_data_wgangp(self):
        svm = SVMachines()

        PATH = os.path.dirname(__file__)
        df_mixed = pd.read_csv(MIXED_CSV_PATH)

        x_labels_big = df_mixed['class'].values
        df_mixed = df_mixed.drop('class', axis=1)
        x_mixed = df_mixed.values

        _, x_test, _, x_labels = train_test_split(
            x_mixed, x_labels_big, test_size=0.25, random_state=42)

        print(f' x_test: {x_test.shape};'
              f' x_labels: {x_labels.shape};'
              f' x_mixed: {x_mixed.shape};'
              f' x_labels_big: {x_labels_big.shape}')

        pred = svm.rate_flow(x_test)
        errors = abs(pred - x_labels)
        pred_desc = [0 if p < 0.5 else 1 for p in pred]

        tn, fp, fn, tp = confusion_matrix(x_labels, pred_desc).ravel()

        text = f"""
         Percentage of correctly detected anomalies in all anomalies: {round(tp / (tp + fn), 4)}
         Percentage of detected anomalies in all overall traffic: {round((tp + fp) / len(x_labels), 4)}
         Percentage of falsely detected anomalies in all overall traffic: {round(fp / len(x_labels), 4)}
         """

        text_short = f"""
         correctly detected anomalies in all anomalies: {round(tp / (tp + fn), 4)}
         detected anomalies in all overall traffic: {round((tp + fp) / len(x_labels), 4)}
         falsely detected anomalies in all overall traffic: {round(fp / len(x_labels), 4)}
         """

        ConfusionMatrixDisplay.from_predictions(x_labels, pred_desc)
        plt.figtext(0.05, 0, text_short, fontsize=5, va="bottom", ha="left")
        plt.legend('Support Vector Classification, linear kernel')
        plt.show()

        mape = 100 * (errors / np.sum(x_labels))
        accuracy = 100 - np.mean(mape)
        print('Accuracy:', round(accuracy, 6), '%')
